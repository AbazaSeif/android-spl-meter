package com.google.speech.levelmeter;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.ToggleButton;

import java.text.DecimalFormat;

public class LevelMeterActivity extends Activity implements 
    MicrophoneInputListener {
  
    MicrophoneInput micInput;
    TextView mdBTextView;
    TextView mdBFractionTextView;
    BarLevelDrawable mBarLevel;
    private TextView mGainTextView;
    
    double mOffsetdB = 10;  // Offset for bar.  
    // The Google ASR input requirements state that audio input sensitivity 
    // should be set such that 90 dB SPL at 1000 Hz yields RMS of 2500 for 
    // 16-bit samples, i.e. 20 * log_10(2500 / mGain) = 90.
    double mGain = 2500.0 / Math.pow(10.0, 90.0 / 20.0);
    // For displaying error in calibration.
    double mDifferenceFromNominal = 0.0;
    double mRmsSmoothed;  // Filtered version on RMS.
    double mAlpha = 0.9;  // Coefficient of IIR smoothing filter for RMS.
    
 

    private boolean mDrawing;
    private int mDrawingCollided;

    
    private static final String TAG = "LevelMeterActivity";         
    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);

        
        micInput = new MicrophoneInput(this);
        // Get a handle that will be used in async thread post to update the 
        // display.
        mBarLevel = (BarLevelDrawable)findViewById(R.id.bar_level_drawable_view);
        mdBTextView = (TextView)findViewById(R.id.dBTextView);
        mdBFractionTextView = (TextView)findViewById(R.id.dBFractionTextView);
        mGainTextView = (TextView)findViewById(R.id.gain);
        /**
         * Toggle Button handler.
         */
        final ToggleButton onOffButton=(ToggleButton)findViewById(
            R.id.on_off_toggle_button);
        
        ToggleButton.OnClickListener tbListener =
            new ToggleButton.OnClickListener() {
              @Override
              public void onClick(View v) {
                
                if (onOffButton.isChecked()) {
                  micInput.start();
                } else {
                  micInput.stop();   
                }
              }
        };
        onOffButton.setOnClickListener(tbListener);
        
        /**
         * Level adjustment buttons.
         */
        Button minus1dbButton = (Button)findViewById(R.id.minus_1_db_button);
        Button.OnClickListener minus1dBButtonListener = 
          new Button.OnClickListener() {
            @Override
            public void onClick(View v) {
              LevelMeterActivity.this.mGain /= Math.pow(10, 1.0 / 20.0);
              mDifferenceFromNominal -= 1.0;
              DecimalFormat df = new DecimalFormat("##.# dB");
              mGainTextView.setText(df.format(mDifferenceFromNominal));
            }
        };
        minus1dbButton.setOnClickListener(minus1dBButtonListener);
        
        Button plus1dbButton = (Button)findViewById(R.id.plus_1_db_button);
        Button.OnClickListener plus1dBButtonListener = 
          new Button.OnClickListener() {
            @Override
            public void onClick(View v) {
              LevelMeterActivity.this.mGain *= Math.pow(10, 1.0 / 20.0);
              mDifferenceFromNominal += 1.0;
              DecimalFormat df = new DecimalFormat("##.# dB");
              mGainTextView.setText(df.format(mDifferenceFromNominal));
            }
        };
        plus1dbButton.setOnClickListener(plus1dBButtonListener);
        
        Button minus5dbButton = (Button)findViewById(R.id.minus_5_db_button);
        Button.OnClickListener minus5dBButtonListener = 
          new Button.OnClickListener() {
            @Override
            public void onClick(View v) {
              LevelMeterActivity.this.mGain /= Math.pow(10, 5.0 / 20.0);
              mDifferenceFromNominal -= 5.0;
              DecimalFormat df = new DecimalFormat("##.# dB");
              mGainTextView.setText(df.format(mDifferenceFromNominal));
            }
        };
        minus5dbButton.setOnClickListener(minus5dBButtonListener);
        
        Button plus5dbButton = (Button)findViewById(R.id.plus_5_db_button);
        Button.OnClickListener plus5dBButtonListener = 
          new Button.OnClickListener() {
            @Override
            public void onClick(View v) {
              LevelMeterActivity.this.mGain *= Math.pow(10, 5.0 / 20.0);
              mDifferenceFromNominal += 5.0;
              DecimalFormat df = new DecimalFormat("##.# dB");
              mGainTextView.setText(df.format(mDifferenceFromNominal));
            }
        };
        plus5dbButton.setOnClickListener(plus5dBButtonListener);
        

        
        /**
         * Settings button, launches the settings dialog.
         */
        Button settingsButton=(Button)findViewById(R.id.settingsButton);
        Button.OnClickListener settingsBtnListener = 
            new Button.OnClickListener() {

              @Override
              public void onClick(View v) {
                Intent settingsIntent = new Intent(LevelMeterActivity.this, Settings.class);
                LevelMeterActivity.this.startActivity(settingsIntent);
              }
        };
        settingsButton.setOnClickListener(settingsBtnListener);

    }
    /* (non-Javadoc)
     * @see com.google.speech.levelmeter.MicrophoneInputListener#processAudioFrame(short[])
     */
    @Override
    public void processAudioFrame(short[] audioFrame) {
      // TODO(trausti): Auto-generated method stub
      if (!mDrawing) {
        mDrawing = true;
        double rms = 0;
        for (int i = 0; i < audioFrame.length; i++) {
          rms += audioFrame[i]*audioFrame[i];
        }
        rms = Math.sqrt(rms/audioFrame.length);

        mRmsSmoothed = mRmsSmoothed * mAlpha + (1 - mAlpha) * rms;
        final double rmsdB = 20.0 * Math.log10(mGain * mRmsSmoothed);
        mBarLevel.post(new Runnable() {
          @Override
          public void run() {

            mBarLevel.setLevel((mOffsetdB + rmsdB) / 60);

            DecimalFormat df = new DecimalFormat("##");
            mdBTextView.setText(df.format(20 + rmsdB));

            DecimalFormat df_fraction = new DecimalFormat("#");
            int one_decimal = (int) (Math.round(Math.abs(rmsdB * 10))) % 10;
            mdBFractionTextView.setText(Integer.toString(one_decimal));
            mDrawing = false;
          }
        });
        //Log.v(TAG, Double.toString(rmsdB));
      } else {
        mDrawingCollided++;
      }
    }
}